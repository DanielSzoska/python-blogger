=================================
Using the Blogger API from Python
=================================

Blogger exposes a Google Data API. Using this API, you can access all parts of
your blog using simple HTTP requests. The REST-style API is based on the
Atom Publishing Protocol.

It is very easy to access the blogger API (or any Google Data API) from
Python using the `Google Data APIs Python Client Library (gdata-python-client) <http://code.google.com/p/gdata-python-client/>`_. 
This library is easy to use, has great documentation and great sample code
included.

Using `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ and gdata-python-client I created a simple
application (``blogger.py``) that takes a rst file, converts it to HTML and publishes the HTML on my blog.

Using this approach, I can edit blog posts in `a my editor of choice
<http://www.vim.org>`_, using an easy-to-read plaintext markup syntax.

Example use::

    # first, get the blog id
    (vanilla)[~/misc/blogger]
    $ python blogger.py --username my.email@gmail.com --listblogs
    Password: 
    nnnnnnnnnnnnnnnnnnn: Code Monkey Do

    # then create a new blog post
    (vanilla)[~/misc/blogger]
    $ python blogger.py --username my.email@gmail.com --blogid nnnnnnnnnnnnnnnnnnn post1.rst 
    Password: 

``blogger.py`` source code::

    import atom
    from docutils.examples import html_parts
    import gdata
    import gdata.service
    import getpass

    def login(username, password):
        service = gdata.service.GDataService(username, password)
        service.service = 'blogger'
        service.server = 'www.blogger.com'
        service.ProgrammaticLogin()
        return service

    def create_entry(title, content, draft=False):
        entry = gdata.GDataEntry()
        entry.title = atom.Title(title_type='text', text=title)
        entry.content = atom.Content(content_type='html', text=content.encode('utf8'))
        if draft:
            control = atom.Control()
            control.draft = atom.Draft(text='yes')
            entry.control = control
        return entry

    def listblogs(service):
        feed = service.Get('/feeds/default/blogs')
        for blog in feed.entry:
            print "%s: %s" % (blog.GetSelfLink().href.split('/')[-1],
                blog.title.text)

    def read_blogpost(filename, rawhtml, rawhtmltitle):
        if not rawhtml:
            parts = html_parts(open(filename, 'rb').read().decode('utf8'))
            title = parts['title']
            content = parts['body']
        else:
            title = opts.title
            content = open(filename, 'rb').read().decode('utf8')
        return title, content

    if __name__ == '__main__':
        from optparse import OptionParser

        parser = OptionParser()
        parser.add_option("--username")
        parser.add_option("--password")
        parser.add_option("--blogid")
        parser.add_option("--rawhtml", action="store_true", default=False)
        parser.add_option("--title", help="Only used with --rawhtml")
        parser.add_option("--listblogs", action="store_true", default=False)

        opts, args = parser.parse_args()
        if not opts.password:
            opts.password = getpass.getpass()
        if opts.listblogs:
            listblogs(login(opts.username, opts.password))
        else:
            if not args: parser.error("Specify file name")

            title, content = read_blogpost(args[0], opts.rawhtml, opts.title)
            login(opts.username, opts.password).Post(
                create_entry(title, content),
                '/feeds/' + opts.blogid + '/posts/default')
